name: Async.Locks Debugging CI/CD

on:
  push:
    branches:
      - development/github-workflows
  pull_request:
    branches:
      - development/github-workflows

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ulfbou/dotnet-node:9.0
    env:
      PROJECT_ROOT: /github/workspace
      SLN_FILE: /github/workspace/Async.Locks.sln
      SRC_DIR: /github/workspace/Src
      LOCKS_PROJECT_FILE: /github/workspace/Src/Async.Locks.csproj
      TEST_DIR: /github/workspace/Tests
      TESTS_PROJECT_FILE: /github/workspace/Tests/Async.Locks.Tests.csproj
      BENCHMARKS_DIR: /github/workspace/Benchmarks
      BENCHMARKS_PROJECT_FILE: /github/workspace/Benchmarks/Async.Locks.Benchmarks.csproj
      BUILD_OUTPUT_DIR: /github/workspace/build-output
      TEST_RESULTS_DIR: /github/workspace/TestResults
      BENCHMARK_RESULTS_DIR: /github/workspace/benchmark-results
      CODECOVERAGE_SETTINGS_FILE: /github/workspace/codecoverage.runsettings
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Print dotnet-tools.json (Debug)
        run: cat .config/dotnet-tools.json
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash

      - name: Run GitVersion
        id: gitversion
        run: |
          echo "Current PATH: $PATH"
          local_tool_path="$PROJECT_ROOT/.dotnet/tools/dotnet-gitversion"
          echo "Checking if executable exists at: $local_tool_path"
          if [ -f "$local_tool_path" ]; then
            echo "Executable found."
            gitversion_output="$("$local_tool_path" /output json)"
            echo "GitVersion Output (JSON):"
            echo "$gitversion_output"
            echo "##[set-output name=major]::$(echo "$gitversion_output" | jq -r '.Major')"
            echo "##[set-output name=minor]::$(echo "$gitversion_output" | jq -r '.Minor')"
            echo "##[set-output name=patch]::$(echo "$gitversion_output" | jq -r '.Patch')"
            echo "##[set-output name=semver]::$(echo "$gitversion_output" | jq -r '.SemVer')"
            echo "##[set-output name=informationalversion]::$(echo "$gitversion_output" | jq -r '.InformationalVersion')"
            echo "##[set-output name=majorMinorPatch]::$(echo "$gitversion_output" | jq -r '.MajorMinorPatch')"
          else
            echo "Executable NOT found at: $local_tool_path"
          fi
        shell: bash