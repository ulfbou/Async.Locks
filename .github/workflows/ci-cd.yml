name: Async.Locks CI/CD

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ulfbou/dotnet-node:9.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load .env file
        uses: jpfulton/github-action-dotenv-load@v1
        with:
          path: .env

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Run GitVersion and Create gitversion.props
        id: gitversion
        run: |
          gitversion_output="$("dotnet-gitversion" /output json)"
          echo "##[set-output name=major]::$(echo "$gitversion_output" | jq -r '.Major')"
          echo "##[set-output name=minor]::$(echo "$gitversion_output" | jq -r '.Minor')"
          echo "##[set-output name=patch]::$(echo "$gitversion_output" | jq -r '.Patch')"
          echo "##[set-output name=semver]::$(echo "$gitversion_output" | jq -r '.SemVer')"
          echo "##[set-output name=informationalversion]::$(echo "$gitversion_output" | jq -r '.InformationalVersion')"
          echo "##[set-output name=majorMinorPatch]::$(echo "$gitversion_output" | jq -r '.MajorMinorPatch')"

          major=$(echo "$gitversion_output" | jq -r '.Major')
          minor=$(echo "$gitversion_output" | jq -r '.Minor')
          patch=$(echo "$gitversion_output" | jq -r '.Patch')
          assembly_version="${major}.${minor}.${patch}.0"

          echo "<Project>" > gitversion.props
          echo "  <PropertyGroup>" >> gitversion.props
          echo "    <AssemblyVersion>${assembly_version}</AssemblyVersion>" >> gitversion.props
          echo "    <FileVersion>$(echo "$gitversion_output" | jq -r '.SemVer')</FileVersion>" >> gitversion.props
          echo "    <Version>$(echo "$gitversion_output" | jq -r '.SemVer')</Version>" >> gitversion.props
          echo "    <InformationalVersion>$(echo "$gitversion_output" | jq -r '.InformationalVersion')</InformationalVersion>" >> gitversion.props
          echo "  </PropertyGroup>" >> gitversion.props
          echo "</Project>" >> gitversion.props

          echo "Generated gitversion.props"

      - name: Upload GitVersion Props Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitversion-props
          path: gitversion.props
          if-no-files-behavior: error

      - name: Restore dependencies
        run: dotnet restore ${{ env.SLN_FILE }}

      - name: Build project
        run: dotnet build ${{ env.SLN_FILE }} --configuration Release --output ${{ env.BUILD_OUTPUT_DIR }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_OUTPUT_DIR }}
          if-no-files-behavior: error

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ulfbou/dotnet-node:9.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load .env file
        uses: jpfulton/github-action-dotenv-load@v1
        with:
          path: .env

      - name: Run unit tests (Async.Locks.Tests)
        run: |
          mkdir -p ${{ env.TEST_RESULTS_DIR }}
          dotnet test ${{ env.TESTS_PROJECT_FILE }} --configuration Release --logger:"trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/test-results.trx" --settings ${{ env.CODECOVERAGE_SETTINGS_FILE }} -p:Parallelize=true
        working-directory: ${{ env.TEST_DIR }}
        continue-on-error: false

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ulfbou/dotnet-node:9.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load .env file
        uses: jpfulton/github-action-dotenv-load@v1
        with:
          path: .env

      - name: Run benchmarks
        run: |
          mkdir -p ${{ env.BENCHMARK_RESULTS_DIR }}
          dotnet run --project ${{ env.BENCHMARKS_PROJECT_FILE }} --configuration Release -f net9.0 -o ${{ env.BENCHMARK_RESULTS_DIR }}
        working-directory: ${{ env.BENCHMARKS_DIR }}

      - name: Analyze Benchmark Results
        run: |
          echo "Placeholder for Analyzing benchmark results..."

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'
    container:
      image: ulfbou/dotnet-node:9.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load .env file
        uses: jpfulton/github-action-dotenv-load@v1
        with:
          path: .env

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SLN_FILE }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_OUTPUT_DIR }}

      - name: Download GitVersion props artifact
        uses: actions/download-artifact@v4
        with:
          name: gitversion-props
          path: .

      - name: Pack NuGet package
        run: dotnet pack ${{ env.LOCKS_PROJECT_FILE }} --configuration Release --output ${{ env.BUILD_OUTPUT_DIR }} -p:PackageVersion=${{ steps.gitversion.outputs.semver }}

      - name: Publish NuGet package
        run: dotnet nuget push ${{ env.BUILD_OUTPUT_DIR }}/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ env.NUGET_API_KEY }}